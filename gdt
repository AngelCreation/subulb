package in.co.surya.suryabulb.Fragment;

import android.app.DatePickerDialog;
import android.app.TimePickerDialog;
import android.content.Context;
import android.graphics.Color;
import android.graphics.Typeface;
import android.os.Bundle;
import android.support.design.widget.FloatingActionButton;
import android.support.design.widget.Snackbar;
import android.support.v4.app.Fragment;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.view.inputmethod.InputMethodManager;
import android.widget.ArrayAdapter;
import android.widget.Button;
import android.widget.DatePicker;
import android.widget.EditText;
import android.widget.ScrollView;
import android.widget.Spinner;
import android.widget.TextView;
import android.widget.TimePicker;

import java.util.Calendar;
import java.util.concurrent.Executors;
import java.util.concurrent.ScheduledExecutorService;
import java.util.concurrent.TimeUnit;

import in.co.surya.suryabulb.Activity.DashBoard;
import in.co.surya.suryabulb.Helper.DataHandler;
import in.co.surya.suryabulb.Helper.DatePickerFragment;
import in.co.surya.suryabulb.Helper.FlagsData;
import in.co.surya.suryabulb.Helper.TimerPickerFragment;
import in.co.surya.suryabulb.R;


public class GetData extends Fragment implements View.OnClickListener {

    String[] LOG_MODE = {"[--Log Mode--]", "Hold", "Overlap"};
    String[] USER_LOG_TIME = {"[--User Log Time--]", "Second", "Minute", "Hour"};
    int hours = -1;
    int minutes = -1;
    int day = 0;
    int month = 0;
    int year = 0;
    private TextView textviewGetVoltage, textviewGetDate, textviewGetTime, textviewGetLogMode,
            textviewGetUserLogTime, textviewGetUserLogTimeVal, textviewGetCycle,
            textviewGetOnTimeLog, textviewGetOffTimeLog, textviewGetRunHour, textviewGetDMUStatus,
            textviewGetCTCount;
    private EditText edittextSetDate, edittextSetTime, edittextSetUserLogTimeVal, edittextSetCTPoint;
    private Button buttonSetDate, buttonSetTime, buttonSetLoggingMode, buttonSetUserLogTime,
            buttonSetUserLogTimeVal, buttonSetCTPoint;
    private Spinner spinnerSetLogMode, spinnerSetUserLogTime;
    private ScrollView scroll;
    private FloatingActionButton fab;
    private DataHandler dataHandler;
    private Thread thread;


    public GetData() {
        // Required empty public constructor
    }

    @Override
    public View onCreateView(LayoutInflater inflater, ViewGroup container,
                             Bundle savedInstanceState) {
        // Inflate the layout for this fragment
        View view = inflater.inflate(R.layout.fragment_get_data, container, false);

        textviewGetVoltage = (TextView) view.findViewById(R.id.textviewGetVoltage);
        textviewGetDate = (TextView) view.findViewById(R.id.textviewGetDate);
        textviewGetTime = (TextView) view.findViewById(R.id.textviewGetTime);
        textviewGetLogMode = (TextView) view.findViewById(R.id.textviewGetLogMode);
        textviewGetUserLogTime = (TextView) view.findViewById(R.id.textviewGetUserLogTime);
        textviewGetUserLogTimeVal = (TextView) view.findViewById(R.id.textviewGetUserLogTimeVal);
        textviewGetCycle = (TextView) view.findViewById(R.id.textviewGetCycle);
        textviewGetOnTimeLog = (TextView) view.findViewById(R.id.textviewGetOnTimeLog);
        textviewGetOffTimeLog = (TextView) view.findViewById(R.id.textviewGetOffTimeLog);
        textviewGetRunHour = (TextView) view.findViewById(R.id.textviewGetRunHour);
        textviewGetDMUStatus = (TextView) view.findViewById(R.id.textviewGetDMUStatus);
        textviewGetCTCount = (TextView) view.findViewById(R.id.textviewGetCTCount);

        edittextSetDate = (EditText) view.findViewById(R.id.edittextSetDate);
        edittextSetTime = (EditText) view.findViewById(R.id.edittextSetTime);
        edittextSetUserLogTimeVal = (EditText) view.findViewById(R.id.edittextSetUserLogTimeVal);
        edittextSetCTPoint = (EditText) view.findViewById(R.id.edittextSetCTPoint);

        buttonSetDate = (Button) view.findViewById(R.id.buttonSetDate);
        buttonSetTime = (Button) view.findViewById(R.id.buttonSetTime);
        buttonSetLoggingMode = (Button) view.findViewById(R.id.buttonSetLoggingMode);
        buttonSetUserLogTime = (Button) view.findViewById(R.id.buttonSetUserLogTime);
        buttonSetUserLogTimeVal = (Button) view.findViewById(R.id.buttonSetUserLogTimeVal);
        buttonSetCTPoint = (Button) view.findViewById(R.id.buttonSetCTPoint);
        fab = (FloatingActionButton) view.findViewById(R.id.fab);

        scroll = (ScrollView) view.findViewById(R.id.scroll);

        spinnerSetLogMode = (Spinner) view.findViewById(R.id.spinnerSetLogMode);
        ArrayAdapter<String> adapter = new ArrayAdapter<String>(getActivity(), android.R.layout.simple_dropdown_item_1line, LOG_MODE);
        spinnerSetLogMode.setAdapter(adapter);

        spinnerSetUserLogTime = (Spinner) view.findViewById(R.id.spinnerSetUserLogTime);
        ArrayAdapter<String> adapter1 = new ArrayAdapter<String>(getActivity(), android.R.layout.simple_dropdown_item_1line, USER_LOG_TIME);
        spinnerSetUserLogTime.setAdapter(adapter1);

        textviewGetVoltage.requestFocus();

        dataHandler = new DataHandler();

        buttonSetDate.setOnClickListener(this);
        buttonSetTime.setOnClickListener(this);
        buttonSetLoggingMode.setOnClickListener(this);
        buttonSetUserLogTime.setOnClickListener(this);
        buttonSetUserLogTimeVal.setOnClickListener(this);
        buttonSetCTPoint.setOnClickListener(this);
        fab.setOnClickListener(this);

//        CSVReader csvReader = new CSVReader(getActivity());

        edittextSetDate.setOnFocusChangeListener(new View.OnFocusChangeListener() {
            @Override
            public void onFocusChange(View view, boolean b) {
                if (b) {
                    view.performClick();
                }
            }
        });

        edittextSetDate.setOnClickListener(new View.OnClickListener() {
            DatePickerDialog.OnDateSetListener ondate = new DatePickerDialog.OnDateSetListener() {

                public void onDateSet(DatePicker view, int year1, int monthOfYear,
                                      int dayOfMonth) {
                    try {
                        day = dayOfMonth;
                        month = monthOfYear;
                        year = year1;
                        edittextSetDate.setText(String.format("%1$02d", dayOfMonth) + "/" + String.format("%1$02d", monthOfYear + 1)
                                + "/" + String.valueOf(year1));
                    } catch (Exception e) {
                        e.printStackTrace();
                    }
                }
            };

            @Override
            public void onClick(View view) {
                //close keyboard
                InputMethodManager imm = (InputMethodManager) view.getContext().getSystemService(Context.INPUT_METHOD_SERVICE);
                if (imm != null) {
                    imm.hideSoftInputFromWindow(view.getWindowToken(), 0);
                }

                DatePickerFragment date = new DatePickerFragment();
                Calendar calender = Calendar.getInstance();
                Bundle args = new Bundle();
                int thisDay = day;
                int thisYear = year;
                int thisMonth = month;
                if (thisDay == 0)
                    thisDay = calender.get(Calendar.DAY_OF_MONTH);
                if (thisYear == 0)
                    thisYear = calender.get(Calendar.YEAR);
                if (thisMonth == 0)
                    thisMonth = calender.get(Calendar.MONTH);
                args.putInt("year", thisYear);
                args.putInt("month", thisMonth);
                args.putInt("day", thisDay);

                date.setArguments(args);

                date.setCallBack(ondate);
                date.show(getFragmentManager(), "Date Picker");
            }
        });

        edittextSetTime.setOnFocusChangeListener(new View.OnFocusChangeListener() {
            @Override
            public void onFocusChange(View view, boolean b) {
                if (b) {
                    view.performClick();
                }
            }
        });

        edittextSetTime.setOnClickListener(new View.OnClickListener() {
            TimePickerDialog.OnTimeSetListener onTimeSet = new TimePickerDialog.OnTimeSetListener() {
                public void onTimeSet(TimePicker view, int hourOfDay, int minute) {
                    hours = hourOfDay;
                    minutes = minute;
                    if (hourOfDay > 12) {
                        edittextSetTime.setText(String.format("%02d", hourOfDay - 12) + ":" + String.format("%02d", minute) + ":" + "00" + " " + "PM");
                    } else {
                        edittextSetTime.setText(String.format("%02d", hourOfDay) + ":" + String.format("%02d", minute) + ":" + "00" + " " + "AM");
                    }
                }
            };

            @Override
            public void onClick(View view) {
                //close keyboard
                InputMethodManager imm = (InputMethodManager) view.getContext().getSystemService(Context.INPUT_METHOD_SERVICE);
                if (imm != null) {
                    imm.hideSoftInputFromWindow(view.getWindowToken(), 0);
                }

                try {
                    TimerPickerFragment newFragment = new TimerPickerFragment();
                    Bundle args = new Bundle();
                    args.putInt("hours", hours);
                    args.putInt("minutes", minutes);
                    newFragment.setArguments(args);
                    newFragment.setCallBack(onTimeSet);
                    newFragment.show(getFragmentManager(), "timePicker");
                } catch (Exception e) {
                    e.printStackTrace();
                }
            }
        });

//        final Timer timer = new Timer();
//        timer.schedule(new TimerTask() {
//            @Override
//            public void run() {
//                if (getActivity() != null) {
//                    getActivity().runOnUiThread(new Runnable() {
//                        @Override
//                        public void run() {
//                            if (dataHandler.getLiveVoltage() != null) {
//                                textviewGetVoltage.setText(dataHandler.getLiveVoltage() + "V");
//                                ((DashBoard) getActivity()).setConnectedStatus(true);
//                            } else {
//                                ((DashBoard) getActivity()).setConnectedStatus(false);
//                            }
//                        }
//                    });
//                } else {
//                    timer.cancel();
//                }
//
//            }
//        }, 0, 5000);
        final ScheduledExecutorService scheduleTaskExecutor = Executors.newScheduledThreadPool(5);

        scheduleTaskExecutor.scheduleAtFixedRate(new Runnable() {
            @Override
            public void run() {

                if (getActivity() != null) {
                    if(!FlagsData.gettingData) {
                        if(getUserVisibleHint()) {
                            final String voltage = dataHandler.getLiveVoltage();
                            getActivity().runOnUiThread(new Runnable() {
                                @Override
                                public void run() {
                                    if (voltage != null) {
                                        textviewGetVoltage.setText(voltage + "V");
                                        ((DashBoard) getActivity()).setConnectedStatus(true);
                                    } else {
                                        ((DashBoard) getActivity()).setConnectedStatus(false);
                                    }
                                }
                            });
                        }
                    }
                } else {
                    scheduleTaskExecutor.shutdown();
                }
            }
        }, 1, 5, TimeUnit.SECONDS);

        return view;
    }


    @Override
    public void onClick(View view) {

        switch (view.getId()) {
            case R.id.buttonSetDate:
                thread = new Thread(new Runnable() {
                    @Override
                    public void run() {
                        if (edittextSetDate.getText().toString() == null || edittextSetDate.getText().toString().isEmpty()) {
                            setSnackBar("Please Select Date");
                        } else {
                            boolean success = dataHandler.setDate(edittextSetDate.getText().toString());
                            if (success) {
                                setSnackBar("Date Is Set Successfully");
                                getActivity().runOnUiThread(new Runnable() {
                                    @Override
                                    public void run() {
                                        edittextSetDate.setText("");
                                    }
                                });
                            } else {
                                setSnackBar("Something Went Wrong Please Try After Sometime");
                            }

                        }
                    }
                });
                thread.start();
                break;
            case R.id.buttonSetTime:
                thread = new Thread(new Runnable() {
                    @Override
                    public void run() {
                        if (edittextSetTime.getText().toString() == null || edittextSetTime.getText().toString().isEmpty()) {
                            setSnackBar("Please Select Time");
                        } else {
                            boolean success = dataHandler.setTime(edittextSetTime.getText().toString());
                            if (success) {
                                setSnackBar("Time Is Set Successfully");
                                getActivity().runOnUiThread(new Runnable() {
                                    @Override
                                    public void run() {
                                        edittextSetTime.setText("");
                                    }
                                });
                            } else {
                                setSnackBar("Something Went Wrong Please Try After Sometime");
                            }
                        }
                    }
                });
                thread.start();
                break;
            case R.id.buttonSetLoggingMode:
                thread = new Thread(new Runnable() {
                    @Override
                    public void run() {
                        if (spinnerSetLogMode.getSelectedItem().toString() != LOG_MODE[0]) {
                            boolean success = false;
                            switch (spinnerSetLogMode.getSelectedItem().toString()) {
                                case "Hold":
                                    success = dataHandler.setLoggingMode(0);
                                    break;
                                case "Overlap":
                                    success = dataHandler.setLoggingMode(1);
                                    break;
                            }
                            if (success) {
                                setSnackBar("Log Mode Is Set Successfully");
                                getActivity().runOnUiThread(new Runnable() {
                                    @Override
                                    public void run() {
                                        spinnerSetLogMode.setSelection(0);
                                    }
                                });
                            } else {
                                setSnackBar("Something Went Wrong Please Try After Sometime");
                            }
                        } else {
                            setSnackBar("Please Select Log Mode");
                        }
                    }
                });
                thread.start();
                break;
            case R.id.buttonSetUserLogTime:
                thread = new Thread(new Runnable() {
                    @Override
                    public void run() {
                        if (spinnerSetUserLogTime.getSelectedItem().toString() != USER_LOG_TIME[0]) {
                            boolean success = false;
                            switch (spinnerSetUserLogTime.getSelectedItem().toString()) {
                                case "Second":
                                    success = dataHandler.setUserSelectLogTime(0);
                                    break;
                                case "Minute":
                                    success = dataHandler.setUserSelectLogTime(1);
                                    break;
                                case "Hour":
                                    success = dataHandler.setUserSelectLogTime(2);
                                    break;
                            }
                            if (success) {
                                setSnackBar("User Log Time Is Set Successfully");
                                getActivity().runOnUiThread(new Runnable() {
                                    @Override
                                    public void run() {
                                        spinnerSetUserLogTime.setSelection(0);
                                    }
                                });

                            } else {
                                setSnackBar("Something Went Wrong Please Try After Sometime");
                            }
                        } else {
                            setSnackBar("Please Select User Log Time");
                        }
                    }
                });
                thread.start();
                break;
            case R.id.buttonSetUserLogTimeVal:
                thread = new Thread(new Runnable() {
                    @Override
                    public void run() {
                        if (edittextSetUserLogTimeVal.getText().toString().matches("")) {
                            setSnackBar("Please Enter User Log Time Value");
                        } else {
                            int i = Integer.parseInt(edittextSetUserLogTimeVal.getText().toString());
                            if (i >= 1 && i <= 168) {
                                boolean success = dataHandler.setUserSelectLogTimeValue(i);
                                if (success) {
                                    setSnackBar("User Log Time Value Is Set Successfully");
                                    getActivity().runOnUiThread(new Runnable() {
                                        @Override
                                        public void run() {
                                            edittextSetUserLogTimeVal.setText("");
                                        }
                                    });
                                } else {
                                    setSnackBar("Something Went Wrong Please Try After Sometime");
                                }
                            } else {
                                setSnackBar("Please Enter Value Between 1 to 168");
                            }
                        }
                    }
                });
                thread.start();
                break;
            case R.id.buttonSetCTPoint:
                thread = new Thread(new Runnable() {
                    @Override
                    public void run() {
                        if (edittextSetCTPoint.getText().toString().matches("")) {
                            setSnackBar("Please Enter CT Point Value");
                        } else {
                            int cityCount = Integer.parseInt(edittextSetCTPoint.getText().toString());

                            if (cityCount >= 0 && cityCount <= 255) {
                                if (dataHandler.setCTCount(cityCount)) {
                                    setSnackBar("CT Point Is Set Successfully");
                                    getActivity().runOnUiThread(new Runnable() {
                                        @Override
                                        public void run() {
                                            edittextSetCTPoint.setText("");
                                        }
                                    });
                                } else {
                                    setSnackBar("Something Went Wrong Please Try After Sometime");
                                }
                            } else {
                                setSnackBar("Please Enter Value Between 0 To 255");
                            }
                        }
                    }
                });
                thread.start();
                break;
            case R.id.fab:
//                scroll.fullScroll(ScrollView.FOCUS_UP);

//                if(dataHandler.getLiveVoltage() != null) {
//                    textviewGetVoltage.setText(dataHandler.getLiveVoltage() + "V");
//                }
                Thread thread = new Thread(new Runnable() {
                    @Override
                    public void run() {
                        FlagsData.gettingData = true;
                        String response;
                        if ((response = dataHandler.getLiveVoltage()) != null) {
                            final String res = response;
                            getActivity().runOnUiThread(new Runnable() {
                                @Override
                                public void run() {
                                    textviewGetVoltage.setText(res + "V");
                                }
                            });

                        }
                        if ((response = dataHandler.getDate()) != null) {
                            final String res = response;
                            getActivity().runOnUiThread(new Runnable() {
                                @Override
                                public void run() {
                                    textviewGetDate.setText(res);
                                }
                            });

                        }

                        if ((response = dataHandler.getTime()) != null) {
                            final String res = response;
                            getActivity().runOnUiThread(new Runnable() {
                                @Override
                                public void run() {
                                    textviewGetTime.setText(res);
                                }
                            });

                        }

                        if ((response = dataHandler.getLoggingMode()) != null) {
                            final String res = response;
                            getActivity().runOnUiThread(new Runnable() {
                                @Override
                                public void run() {
                                    switch (res) {
                                        case "0":
                                            textviewGetLogMode.setText("HOLD");
                                            break;
                                        case "1":
                                            textviewGetLogMode.setText("Overlap");
                                            break;
                                        default:
                                            textviewGetLogMode.setText(" ");
                                            break;
                                    }
                                }
                            });

                        }

                        if ((response = dataHandler.getUserSelectLogTime()) != null) {
                            final String res = response;
                            getActivity().runOnUiThread(new Runnable() {
                                @Override
                                public void run() {
                                    textviewGetUserLogTime.setText(res);
                                }
                            });

                        }

                        if ((response = dataHandler.getUserSelectLogTimeValue()) != null) {
                            final String res = response;
                            getActivity().runOnUiThread(new Runnable() {
                                @Override
                                public void run() {
                                    textviewGetUserLogTimeVal.setText(res);
                                }
                            });

                        }

                        if ((response = dataHandler.getONOFFCycle()) != null) {
                            final String res = response;
                            getActivity().runOnUiThread(new Runnable() {
                                @Override
                                public void run() {
                                    textviewGetCycle.setText(res);
                                }
                            });

                        }

                        if ((response = dataHandler.getONTimeLog()) != null) {
                            final String res = response;
                            getActivity().runOnUiThread(new Runnable() {
                                @Override
                                public void run() {
                                    textviewGetOnTimeLog.setText(res);
                                }
                            });

                        }
                        if ((response = dataHandler.getOFFTimeLog()) != null) {
                            final String res = response;
                            getActivity().runOnUiThread(new Runnable() {
                                @Override
                                public void run() {
                                    textviewGetOffTimeLog.setText(res);
                                }
                            });

                        }
                        if ((response = dataHandler.getRunHour()) != null) {
                            final String res = response;
                            getActivity().runOnUiThread(new Runnable() {
                                @Override
                                public void run() {
                                    textviewGetRunHour.setText(res);
                                }
                            });

                        }
                        if ((response = dataHandler.DMUPassFail()) != null) {
                            final String res = response;
                            getActivity().runOnUiThread(new Runnable() {
                                @Override
                                public void run() {
                                    textviewGetDMUStatus.setText(res);
                                }
                            });

                        }
                        if ((response = dataHandler.getCTCount()) != null) {
                            final String res = response;
                            getActivity().runOnUiThread(new Runnable() {
                                @Override
                                public void run() {
                                    textviewGetCTCount.setText(res);
                                }
                            });

                        }

                        FlagsData.gettingData = false;
                    }
                });
                thread.start();
//                textviewGetVoltage.requestFocus();
                InputMethodManager imm = (InputMethodManager) view.getContext().getSystemService(Context.INPUT_METHOD_SERVICE);
                if (imm != null) {
                    imm.hideSoftInputFromWindow(view.getWindowToken(), 0);
                }
                scroll.fullScroll(ScrollView.FOCUS_UP);
        }
    }

    private void setSnackBar(String message) {
        Snackbar snackbar = Snackbar.make(getView(), message, Snackbar.LENGTH_SHORT);
        Snackbar.SnackbarLayout layout = (Snackbar.SnackbarLayout) snackbar.getView();
        layout.setBackgroundColor(Color.parseColor("#df013A"));
        TextView textView = (TextView) layout.findViewById(android.support.design.R.id.snackbar_text);
        textView.setTypeface(Typeface.DEFAULT_BOLD);
        snackbar.show();
    }
}
